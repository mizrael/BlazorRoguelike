@inject HttpClient Http
@inject Core.Assets.IAssetsResolver AssetsResolver

<div class="assets" hidden>
    @foreach (var (asset, meta) in _items)
    {
        switch(asset){
            case Core.Assets.SpriteSheet spriteSheet:
                <SpriteSheet Source="@spriteSheet" OnLoaded="@OnAssetLoaded" />
                break;
        }
        //@_renderers[item.Item1.GetType()](item.Item1, item.Item2)
    }
</div>

@code{
    [Parameter]
    public string Source { get; set; }

    [Parameter]
    public EventCallback OnLoaded { get; set; }

    private int _assetsToLoad;

    private readonly List<(Core.Assets.IAsset asset, Core.Assets.AssetMeta data)> _items = new ();

    private readonly Dictionary<Type, Func<Core.Assets.IAsset, Core.Assets.AssetMeta, RenderFragment>> _renderers = new ()
    {
        {
            typeof(Core.Assets.Sprite), (a, d) => {
                var sprite = a as Core.Assets.Sprite;
                return @<Sprite Source="@sprite" @OnLoaded="OnAssetLoaded" />;
            }
        },
        {
            typeof(Core.Assets.SpriteSheet), (a, d) =>
            {
                var spriteSheet = a as Core.Assets.SpriteSheet;
                
                return @<SpriteSheet Source="@spriteSheet" OnLoaded="@(() =>{})" />;
            }
        },
        {
            typeof(Core.Assets.AnimationCollection), (a, d) =>
            {
                var animColl = a as Core.Assets.AnimationCollection;

                return @<Animations Source="@animColl" @OnLoaded="OnAssetLoaded" />;                 
            }
        },
        {
            typeof(Core.Assets.Sound), (a, d) =>
            {
                var sound = a as Core.Assets.Sound;

                return @<Sound Source="@sound" @OnLoaded="OnAssetLoaded" />;                 
            }
        }
    };

    protected override async Task OnInitializedAsync()
    {
        var items = await Http.GetFromJsonAsync<Core.Assets.AssetMeta[]>(this.Source);

        _assetsToLoad = items.Length;

        var tasks = items.Select(Load).ToArray();
        await Task.WhenAll(tasks);

        await this.OnLoaded.InvokeAsync(this);
    }

    private async Task Load(Core.Assets.AssetMeta item){
        Core.Assets.IAsset asset = null;
        if (item.Type == "sprite")
            asset = await this.AssetsResolver.Load<Core.Assets.Sprite>(item);
        else if (item.Type == "spritesheet")
            asset = await this.AssetsResolver.Load<Core.Assets.SpriteSheet>(item);
        else if (item.Type == "animations")
            asset = await this.AssetsResolver.Load<Core.Assets.AnimationCollection>(item);
        else if (item.Type == "sound")
            asset = await this.AssetsResolver.Load<Core.Assets.Sound>(item);

        if (null != asset)
            _items.Add(new (asset, item));
    }

    private async ValueTask OnAssetLoaded(){
        _assetsToLoad--;
        Console.WriteLine(_assetsToLoad);
        if(_assetsToLoad < 1)
            await this.OnLoaded.InvokeAsync(this);
    }
}