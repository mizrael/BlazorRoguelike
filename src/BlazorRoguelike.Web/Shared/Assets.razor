@inject HttpClient Http
@inject Core.Assets.IAssetsResolver AssetsResolver

<div class="assets" hidden>
    @foreach (var (asset, meta) in _items)
    {
        switch(asset){
            case Core.Assets.Sprite:
                <Sprite Source="@(asset as Core.Assets.Sprite)" OnLoaded="@OnAssetLoaded" />
                break;
            case Core.Assets.SpriteSheet:
                <SpriteSheet Source="@(asset as Core.Assets.SpriteSheet)" OnLoaded="@OnAssetLoaded" />
                break;
            case Core.Assets.AnimationCollection:
                <Animations Source="@(asset as Core.Assets.AnimationCollection)" OnLoaded="@OnAssetLoaded" />
                break;
            case Core.Assets.Sound:
                <Sound Source="@(asset as Core.Assets.Sound)" OnLoaded="@OnAssetLoaded" />
                break;
        }
    }
</div>

@code{
    [Parameter]
    public string Source { get; set; }

    [Parameter]
    public EventCallback OnLoaded { get; set; }

    private int _assetsToLoad;

    private readonly List<(Core.Assets.IAsset asset, Core.Assets.AssetMeta data)> _items = new ();

    protected override async Task OnInitializedAsync()
    {
        var items = await Http.GetFromJsonAsync<Core.Assets.AssetMeta[]>(this.Source);

        _assetsToLoad = items.Length;

        var tasks = items.Select(Load).ToArray();
        await Task.WhenAll(tasks);
    }

    private async Task Load(Core.Assets.AssetMeta item){
        Core.Assets.IAsset asset = null;
        if (item.Type == "sprite")
            asset = await this.AssetsResolver.Load<Core.Assets.Sprite>(item);
        else if (item.Type == "spritesheet")
            asset = await this.AssetsResolver.Load<Core.Assets.SpriteSheet>(item);
        else if (item.Type == "animations")
            asset = await this.AssetsResolver.Load<Core.Assets.AnimationCollection>(item);
        else if (item.Type == "sound")
            asset = await this.AssetsResolver.Load<Core.Assets.Sound>(item);
        else if (item.Type == "map-objects")
        {
            // nothing to render here
            asset = await this.AssetsResolver.Load<Game.Assets.MapObjects>(item);
            await OnAssetLoaded();
        }

        if (null != asset)
            _items.Add(new (asset, item));
    }

    private async Task OnAssetLoaded(){
        _assetsToLoad--;
        if(_assetsToLoad < 1)
            await this.OnLoaded.InvokeAsync(this);
    }
}