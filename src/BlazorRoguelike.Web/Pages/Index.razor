@page "/"
@using System.Drawing
@using BlazorRoguelike.Core
@using BlazorRoguelike.Core.Assets
@using BlazorRoguelike.Core.GameServices
@using BlazorRoguelike.Web.Game
@using Blazor.Extensions
@using Game.GameServices

@inject IJSRuntime JsRuntime
@inject IAssetsResolver AssetsResolver

<Assets Source="assets/assets.json" OnLoaded="@OnAssetsLoaded" />

<div id="mapCanvasContainer" style="position: fixed; opacity: 1; background-color: black; width: 100%; height: 100%">
    <BECanvas @ref="_mapCanvas"></BECanvas>
</div>
<div id="canvasContainer" style="position: fixed; opacity: 1; background-color: black; width: 100%; height: 100%">
    <BECanvas @ref="_canvas"></BECanvas>
</div>

@code
{
    BECanvasComponent _canvas;
    BECanvasComponent _mapCanvas;
    GameContext _game;
    InputService _inputService;

    bool _assetsLoaded = false;
    bool _initialized = false;

    protected void OnAssetsLoaded()
    {
        _assetsLoaded = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!_initialized && _assetsLoaded)
        {
            await InitGame();
            _initialized = true;
        }
    }

    private async ValueTask InitGame()
    {
        var instance = DotNetObjectReference.Create(this);
        var canvasMeta = await JsRuntime.InvokeAsync<CanvasMeta>("initGame", instance); 

        var soundService = new SoundService(JsRuntime);
        _game = new BlazorRoguelikeGame(_canvas, _mapCanvas, AssetsResolver, soundService);

        // this will make sure that the viewport is correctly initialized
        await JsRuntime.InvokeAsync<object>("onResize");
    }

    [JSInvokable]
    public async ValueTask GameLoop()
    {
        if (null == _game)
            return;
        await _game.Step();

        _inputService ??= _game.GetService<InputService>();
    }

    [JSInvokable]
    public async ValueTask OnResize(int screenWidth, int screenHeight)
    {
        if (null == _game) return;
        _game.Display.Size = new Size(screenWidth, screenHeight);
    }

    [JSInvokable]
    public async ValueTask OnKeyDown(int keyCode) =>
        _inputService.Keyboard.SetKeyState((Keys)keyCode, ButtonState.States.Down);

    [JSInvokable]
    public async ValueTask OnKeyUp(int keyCode) =>
        _inputService.Keyboard.SetKeyState((Keys)keyCode, ButtonState.States.Up);

    [JSInvokable]
    public async ValueTask OnMouseMove(int x, int y) =>
        _inputService.Mouse.SetPosition(x, y);

    public class CanvasMeta
    {
        public int Width { get; set; }
        public int Height { get; set; }
    }
}
