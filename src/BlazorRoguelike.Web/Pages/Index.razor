@page "/"
@using System.Drawing
@using BlazorRoguelike.Core
@using BlazorRoguelike.Core.Assets
@using BlazorRoguelike.Core.GameServices
@using BlazorRoguelike.Web.Game
@using Blazor.Extensions
@using Game.GameServices

@inject IJSRuntime JsRuntime
@inject IAssetsResolver AssetsResolver

<Assets Source="assets/assets.json" OnLoaded="@OnAssetsLoaded" />

@if(!_assetsLoaded){
    <div class="preloading"><span>Loading assets...</span></div>
}

<CanvasManager @ref="_canvasManager" OnCanvasAdded="@OnCanvasAdded" />

@code
{
    CanvasManager _canvasManager;
    GameContext _game;
    InputService _inputService;

    bool _assetsLoaded = false;
    bool _initialized = false;

    private async Task OnAssetsLoaded(){
        _assetsLoaded = true;
        if(!_initialized){
            await InitGame();       
            _initialized = true;
        }             
    }

    private async Task OnCanvasAdded(){
        await JsRuntime.InvokeAsync<object>("onResize");              
    }

    private async ValueTask InitGame()
    {   
        var instance = DotNetObjectReference.Create(this);
        await JsRuntime.InvokeAsync<object>("initGame", instance); 

        var soundService = new SoundService(JsRuntime);
        _game = new BlazorRoguelikeGame(_canvasManager, AssetsResolver, soundService);

        await JsRuntime.InvokeAsync<object>("startGame");              
    }

    [JSInvokable]
    public async ValueTask GameLoop()
    {
        if (null == _game)
            return;
        await _game.Step();

        _inputService ??= _game.GetService<InputService>();
    }

    [JSInvokable]
    public void OnResize(int screenWidth, int screenHeight)
    {
        if (null == _game) return;
        _game.Display.Size = new Size(screenWidth, screenHeight);
    }

    [JSInvokable]
    public void OnKeyDown(int keyCode) =>
        _inputService?.Keyboard.SetKeyState((Keys)keyCode, ButtonState.States.Down);

    [JSInvokable]
    public void OnKeyUp(int keyCode) =>
        _inputService?.Keyboard.SetKeyState((Keys)keyCode, ButtonState.States.Up);

    [JSInvokable]
    public void OnMouseMove(int x, int y) =>
        _inputService?.Mouse.SetPosition(x, y);

    [JSInvokable]
    public void OnMouseDown(MouseButtons button) =>
        _inputService?.Mouse.SetButtonState(button, ButtonState.States.Down);
    
    [JSInvokable]
    public void OnMouseUp(MouseButtons button) =>
        _inputService?.Mouse.SetButtonState(button, ButtonState.States.Up);

    [JSInvokable]
    public void OnMouseWheel(int delta) =>
        _inputService?.Mouse.Scroll(delta);        
}
